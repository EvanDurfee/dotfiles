#!/bin/sh

# This represents a universal config file for environment setup and preferences.
# Load this with a login shell.
# To override, create an overrides file which will be sourced at the end.

# Source this file
# ln -s ~/.config/profile/common ~/.profile
# OR
# ~/.profile: [ -e "~/.config/profile/common" ] && . "~/.config/profile/common"
# "$ZDOTDIR"/.zprofile: [ -e ~/.profile ] && emulate sh -c 'source ~/.profile'

# add .local/bin to path
export PATH="$HOME/.local/bin:$PATH"
# add local golang to path, if present
export PATH="/usr/local/lib/go/bin:/usr/local/go/bin:$PATH"

## Locale
export LANG=en_US.utf8
export LANGUAGE="en_US:en:C"
# In theory, list prefered languages in order
# For whatever reason, Fedora at least will grab swedish for application and categroty names (but not message text) if sv[_SE] appears anywhere in the list
# export LANGUAGE="en_US:en:C:sv_SE:sv"
export LC_ADDRESS=sv_SE.UTF-8
#export LC_ADDRESS=en_US.UTF-8
export LC_COLLATE=C.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_IDENTIFICATION=sv_SE.UTF-8
#export LC_IDENTIFICATION=en_US.UTF-8
export LC_MEASUREMENT=sv_SE.UTF-8
#export LC_MEASUREMENT=en_US.UTF-8
export LC_MESSAGES=en_US.UTF-8
export LC_MONETARY=en_US.UTF-8
export LC_NAME=en_US.UTF-8
export LC_NUMERIC=en_US.UTF-8
export LC_PAPER=sv_SE.UTF-8
#export LC_PAPER=en_US.UTF-8
export LC_TELEPHONE=sv_SE.UTF-8
#export LC_TELEPHONE=en_US.UTF-8
export LC_TIME=C.UTF-8

## Application defaults
export EDITOR="nano"
if hash kitty 2>/dev/null; then
	export TERMINAL="kitty"
elif hash tilix 2>/dev/null; then
	export TERMINAL="tilix"
fi
export BROWSER="firefox"
if hash gnome-text-editor 2>/dev/null; then
	export KUBE_EDITOR="gnome-text-editor"
elif hash gedit 2>/dev/null; then
	export KUBE_EDITOR="gedit"
fi
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# Add inherent scroll support to less / bat as desired
# Means less will handle scrolling instead of the terminal emulator, which is
#  required for scrolling in tmux to work (only works for graphical sessions).
# However, if less takes control of the cursor, it is no longer possible to
#  highlight and copy text from the terminal emulator.
export LESS="-RF"
if [ "$(less --version | head --lines=1 | grep --only-matching -E "[0-9]+")" -ge 549 ]; then
#	export LESS="-RF --mouse --wheel-lines=5"
	export BAT_PAGER="less -RF --mouse --wheel-lines=5"
	export DELTA_PAGER="$BAT_PAGER"
fi

## Application configs

# Exa
# Make the detailed view less of a rainbow
if [ -e "${XDG_CONFIG_HOME:-$HOME/.config}"/exa/colors.cnf ]; then
	# Combine non-commented lines
	export EXA_COLORS="$(grep --extended-regexp --only-matching "^[^# $(printf '\t')]+" "${XDG_CONFIG_HOME:-$HOME/.config}"/exa/colors.cnf | tr '\n' ':')"
fi
export EXA_STRICT=true
export TIME_STYLE="long-iso"
# For more Exa features, see: https://the.exa.website/features.
# You can also study my Dotfiles project: https://www.alchemists.io/projects/dotfiles.
# ☿ 🜔 🜍 🜂 🜃 🜁 🜄

# Initialize color-scheme files
find "${XDG_DATA_HOME:-"$HOME"/.config}/color-scheme/scripts" -maxdepth 1 -type f -exec sh -c '
		if ! "$1" --init >/dev/null 2>&1; then echo "Failed to run $1 --init"; fi
	' sh {} \;

## ~/ cleanup (may need to create these folders / files manually)
# Check here for updates: https://wiki.archlinux.org/index.php/XDG_Base_Directory

# anaconda (python)
export CONDARC="$XDG_CONFIG_HOME/conda/condarc"

# Anki
# Anki is natively supported now, according to https://apps.ankiweb.net/docs/manual20.html#file-locations

# Ansible
export ANSIBLE_HOME="${XDG_CONFIG_HOME}/ansible"
export ANSIBLE_CONFIG="${XDG_CONFIG_HOME}/ansible.cfg"
export ANSIBLE_GALAXY_CACHE_DIR="${XDG_CACHE_HOME}/ansible/galaxy_cache"
# The remote's ~/.ansible/tmp can be moved by setting remote_tmp = ${XDG_CONFIG_HOME}/ansible/tmp in an appropriate ansible.cfg.

# Atom
export ATOM_HOME="$XDG_DATA_HOME"/atom

# AWS cli
export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME"/aws/credentials
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME"/aws/config

# Bash Completion
export BASH_COMPLETION_USER_FILE="$XDG_CONFIG_HOME"/bash-completion/bash_completion

# Ruby bundler
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME"/bundle
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME"/bundle
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME"/bundle

# Rust cargo
export CARGO_HOME="$XDG_DATA_HOME"/cargo

# Conky
# Conky is natively supported now

# Docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"

# FFmpeg
export FFMPEG_DATADIR="$XDG_CONFIG_HOME"/ffmpeg

# GDB
#if which gdb >/dev/null 2>&1; then
#	gdb () {
#		"$(which gdb)" -nh -x "$XDG_CONFIG_HOME"/gdb/init "$@"
#	}
#}

# GnupPG
# Also requires modifying systemd unit files
# export GNUPGHOME="$XDG_DATA_HOME/gnupg"
# mkdir -p "$GNUPGHOME"

# GoLang
# GOPATH is largely replaced by go modules, but is still a fallback
export GOPATH="$XDG_DATA_HOME"/go
# GO build cache (defaults to $XDG_CACHE_HOME/go-build)
export GOCACHE="$XDG_CACHE_HOME"/go/build
# GO module cache (defaults to $GOPATH/pkg)
export GOMODCACHE="$XDG_CACHE_HOME"/go/mod
# GO binary install dir (defaults to $GOPATH/bin)
export GOBIN="$HOME/.local/bin"
mkdir -p "$GOPATH" "$GOCACHE" "GOMODCACHE" "$GOBIN"

# Gradle
export GRADLE_USER_HOME="$XDG_DATA_HOME"/gradle

# GTK
export GTK_RC_FILES="$XDG_CONFIG_HOME"/gtk-1.0/gtkrc
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc

# Java (OpenJDK)
# export _JAVA_OPTIONS=-Djava.util.prefs.userRoot="$XDG_CONFIG_HOME"/java

# KDE
export KDEHOME="$XDG_CONFIG_HOME"/kde

# Kodi
export KODI_DATA="$XDG_DATA_HOME/kodi"

# Kubectl
export KUBECONFIG="$XDG_CONFIG_HOME"/kube/config
export KUBECACHEDIR="$XDG_CACHE_HOME"/kube

# Less
mkdir -p "$XDG_CACHE_HOME"/less
export LESSHISTFILE="$XDG_CACHE_HOME/less/history"
export LESSKEY="$XDG_DATA_HOME/less/lesskey"

# LibX11
export XCOMPOSEFILE="$XDG_CONFIG_HOME"/X11/xcompose
export XCOMPOSECACHE="$XDG_CACHE_HOME"/X11/xcompose

# Maven
# More work than it's worth to change (other apps may still use .m2 anyway)
# Cannot be set via env; requires the settings flag and the following settings:
# <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
#       xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
# <localRepository>${env.XDG_DATA_HOME}/maven</localRepository>
# </settings>
# if which mvn >/dev/null 2>&1; then
# 	mvn () {
# 		"$(which mvn)" -gs "$XDG_CONFIG_HOME"/maven/settings.xml
# 	}
# }

# NodeJS
export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history

# npm
# Requires the following npmrc content:
# prefix=${XDG_DATA_HOME}/npm
# cache=${XDG_CACHE_HOME}/npm
# tmp=${XDG_RUNTIME_DIR}/npm
# init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME"/npm/npmrc

# Nuget
export NUGET_PACKAGES="$XDG_CACHE_HOME"/NuGetPackages

# NVM
export NVM_DIR="$XDG_DATA_HOME"/nvm

# pass
export PASSWORD_STORE_DIR="$XDG_DATA_HOME/password-store"

# PSQL
mkdir -p "$XDG_CONFIG_HOME/pg"
mkdir -p "$XDG_CACHE_HOME/pg"
export PSQLRC="$XDG_CONFIG_HOME/pg/psqlrc"
export PSQL_HISTORY="$XDG_CACHE_HOME/pg/psql_history"
export PGPASSFILE="$XDG_CONFIG_HOME/pg/pgpass"
export PGSERVICEFILE="$XDG_CONFIG_HOME/pg/pg_service.conf"

# Python
export PYTHON_EGG_CACHE="$XDG_CACHE_HOME"/python-eggs
export PYLINTHOME="$XDG_CACHE_HOME"/pylint

# GNU Readline
export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

# Ruby Gems
# Auto-generates a gemrc to set the bin dir to $XDG_DATA_HOME/gem/bin
# XDG_DATA_HOME must not contain spaces
export GEMRC="$XDG_CONFIG_HOME"/gemrc
export GEM_HOME="$XDG_DATA_HOME"/gem
export PATH="$PATH:$GEM_HOME/bin"
export GEM_SPEC_CACHE="$XDG_CACHE_HOME"/gem
if ! [ -e "$XDG_CONFIG_HOME"/gemrc ]; then
	echo "gem: --bindir $GEM_HOME/bin" > "$GEMRC"
fi

# Rust up
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup

# SBT
# more work than it's worth to fix, due to dependent tools

# Teamspeak
# Disabled to avoid breaking flatpak installations
# export TS3_CONFIG_DIR="$XDG_CONFIG_HOME/ts3client"

# Tmux Smart Session Manager
if [ -d "$XDG_DATA_HOME/tmux-plugins/t-smart-tmux-session-manager/bin" ]; then
	export PATH="$PATH:$XDG_DATA_HOME/tmux-plugins/t-smart-tmux-session-manager/bin"
fi

# GNU Screen
export SCREENRC="$XDG_CONFIG_HOME"/screen/screenrc

# vale
#if which vale >/dev/null 2>&1; then
#	vale () {
#		"$(which vale)" --config "$XDG_CONFIG_HOME/vale/config.ini" "$@"
#	}
#}

# Vim (requires specific content in VIMRC, see the wiki)
export VIMINIT='source "$XDG_CONFIG_HOME/vim/vimrc"'

# wget
# Add to wgetrc: hsts-file="$XDG_CACHE_HOME"/wget-hsts
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"

# Wine
mkdir -p "$XDG_DATA_HOME"/wineprefixes
export WINEPREFIX="$XDG_DATA_HOME"/wineprefixes/default

# ZOXIDE
export _ZO_DATA_DIR="$XDG_CACHE_HOME"/zoxide

# ZSH
# Should be done in ~/.zshenv instead, since it is first in the load order
# export ZDOTDIR="$XDG_CONFIG_HOME"/zsh

## Overrides
[ -e "$XDG_CONFIG_HOME/profile/override" ] && . "$XDG_CONFIG_HOME/profile/override"
