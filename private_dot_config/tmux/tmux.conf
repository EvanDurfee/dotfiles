# Prefer zsh over the default shell (if installed)
if "test -f /bin/zsh" \
    "set -g default-shell /bin/zsh"

set -g set-titles on
set -g set-titles-string "#T"

# source-file ~/.config/tmux/themes/tomorrow-night.tmux

# Enable mouse support by default
set -g mouse on

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# If a window is deleted, renumber the following windows
set -g renumber-windows on

# auto window rename
set-window-option -g automatic-rename

# Allows for faster key repetition
set -s escape-time 50

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# Clipboard configuration
# Requires clip util to handle copy / paste across both x11, wayland, and tty
# Must pipe (non-existent) output to /dev/null, or else tmux will hang once the
#  clip exits
# Copy options:
# - copy-selection-and-cancel (copy, clear selection, and exit copy mode)
# - copy-selection            (copy, clear selection, but stay in copy mode)
# - copy-selection-no-clear   (copy, leave selection alone and stay in copy mode)

# Disable built-in osc52 copy (doesn't support primary clipboard)
set -s set-clipboard off

# Left click to leave copy mode (test for a selection to differentiate from a drag event)
# bind -T copy-mode    MouseDown1Pane select-pane \; send -X clear-selection
# bind -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection
# bind -T copy-mode    MouseUp1Pane   if-shell -F '#{selection_present}' {} {send -X cancel}
# bind -T copy-mode-vi MouseUp1Pane   if-shell -F '#{selection_present}' {} {send -X cancel}

# Ctrl + Left click to enter copy mode or clear selection (test for selection to differentiate from a drag event)
# bind -T root         C-MouseDown1Pane {select-pane; copy-mode}
# bind -T copy-mode    C-MouseDown1Pane select-pane \; send -X clear-selection
# bind -T copy-mode-vi C-MouseDown1Pane select-pane \; send -X clear-selection
# bind -T copy-mode    C-MouseUp1Pane   if-shell -F '#{selection_present}' {} {send -X clear-selection}
# bind -T copy-mode-vi C-MouseUp1Pane   if-shell -F '#{selection_present}' {} {send -X clear-selection}

# Left click to clear selection, but remain in copy mode
bind -T copy-mode    MouseDown1Pane select-pane \; send -X clear-selection
bind -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection

# Ctrl + Left click to enter copy mode or clear selection (test for selection to differentiate from a drag event)
bind -T root         C-MouseDown1Pane {select-pane; copy-mode}
bind -T copy-mode    C-MouseDown1Pane select-pane \; send -X clear-selection
bind -T copy-mode-vi C-MouseDown1Pane select-pane \; send -X clear-selection

# Left Click Highlight to select and copy to primary
bind -T copy-mode    MouseDrag1Pane \
    select-pane \; send -X rectangle-off \; send -X begin-selection
bind -T copy-mode-vi MouseDrag1Pane \
    select-pane \; send -X rectangle-off \; send -X begin-selection
bind -T copy-mode    MouseDragEnd1Pane \
    send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'
#    send -X copy-selection-no-clear \; \
#    run -b 'tmux save-buffer - | clip --in --primary >/dev/null'
bind -T copy-mode-vi MouseDragEnd1Pane \
    send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'
#    send -X copy-selection-no-clear \; \
#    run -b 'tmux save-buffer - | clip --in --primary >/dev/null'

# Ctrl+Left Click Highlight to create rectagular selection and copy to primary
bind -T root         C-MouseDrag1Pane \
    if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { select-pane; copy-mode; send -X rectangle-on; send -X begin-selection }
bind -T copy-mode    C-MouseDrag1Pane \
    select-pane \; send -X rectangle-on \; send -X begin-selection
bind -T copy-mode-vi C-MouseDrag1Pane \
    select-pane \; send -X rectangle-on \; send -X begin-selection
bind -T copy-mode    C-MouseDragEnd1Pane \
    send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'
#    send -X copy-selection-no-clear \; \
#    run -b 'tmux save-buffer - | clip --in --primary >/dev/null'
bind -T copy-mode-vi C-MouseDragEnd1Pane \
    send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'
#    send -X copy-selection-no-clear \; \
#    run -b 'tmux save-buffer - | clip --in --primary >/dev/null'

# Middle click to exit copy mode and paste from primary
bind -T root MouseDown2Pane \
    select-pane -t = \; \
    run 'clip --out --primary | tmux load-buffer - && tmux paste-buffer'
bind -T copy-mode MouseDown2Pane \
    send-keys -X cancel \; \
    select-pane -t = \; \
    run 'clip --out --primary | tmux load-buffer - && tmux paste-buffer'
bind -T copy-mode-vi MouseDown2Pane \
    send-keys -X cancel \; \
    select-pane -t = \; \
    run 'clip --out --primary | tmux load-buffer - && tmux paste-buffer'

# Double Left Click to copy word
bind -T root         DoubleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } {select-pane; copy-mode; send -X select-word; run -d 0.3; send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'}
bind -T copy-mode    DoubleClick1Pane select-pane \; send -X select-word \; run -d 0.3 \; send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; run -d 0.3 \; send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'

# Triple Left Click to copy line
bind -T root         TripleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } {copy-mode; send -X select-line; run -d 0.3; send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'}
bind -T copy-mode    TripleClick1Pane {select-pane; send -X select-line; run -d 0.3; send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'}
bind -T copy-mode-vi TripleClick1Pane {select-pane; send -X select-line; run -d 0.3; send -X copy-pipe-no-clear 'clip --in --primary >/dev/null'}

# Ctrl+c to copy in copy mode
bind -T copy-mode C-c \
    send -X copy-selection-no-clear \; \
    run 'tmux save-buffer - | clip --in --clipboard >/dev/null'
bind -T copy-mode-vi C-c \
    send -X copy-selection-no-clear \; \
    run 'tmux save-buffer - | clip --in --clipboard >/dev/null'

# Ctrl+v to exit copy mode and paste
# Note: obstructs the normal Ctrl+v behavior
bind -T root C-v \
    run 'clip --out --clipboard | tmux load-buffer - && tmux paste-buffer'
bind -T copy-mode C-v \
    send-keys -X cancel \; \
    run 'clip --out --clipboard | tmux load-buffer - && tmux paste-buffer'
bind -T copy-mode-vi C-v \
    send-keys -X cancel \; \
    run 'clip --out --clipboard | tmux load-buffer - && tmux paste-buffer'

# Don't extend selection when scrolling
# DISABLED: also prevents you from scrolling while click-dragging... not sure if this can be accomplished
# bind -T copy-mode    WheelUpPane select-pane \; send -X clear-selection \; send -X -N 5 scroll-up
# bind -T copy-mode-vi WheelUpPane select-pane \; send -X clear-selection \; send -X -N 5 scroll-up

# Snapback (exit copy mode when typing characters)
source-file ~/.config/tmux/snapback.conf

# -- Keybindings --
# See tmux list-keys to see current bindings

# Set prefix to Ctrl+space
set-option -g prefix C-Space
# Allow using Ctrl+space space to send prefix in nested sessions
bind space send-prefix

# Easy config reload with <prefix> + r
bind r source-file ~/.config/tmux/tmux.conf \; display-message "~/.tmux.conf reloaded."

# Use Alt-arrow keys to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Shift arrow to switch windows
bind -n S-Left previous-window
bind -n S-Right next-window

# Set easier window split keys (and keep current path when splitting)
unbind h
unbind v
bind h split-window -h -c "#{pane_current_path}"
bind v split-window -v -c "#{pane_current_path}"

# Keep current path when creating a new window
bind c new-window -c "#{pane_current_path}"

# Switch between windows with < and >
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# History scrolling with ctrl + shift + <key>
# TODO: use copy-mode -e to exit copy mode when reaching the bottom; also apply shortcuts in copy modes
bind -n C-S-Pageup copy-mode \; send-keys Pageup
bind -n C-S-Pagedown copy-mode \; send-keys Pagedown
bind -n C-S-Up copy-mode \; send Up
bind -n C-S-Down copy-mode \; send Down
bind -n C-S-Home copy-mode \; send -X history-top
bind -n C-S-End copy-mode \; send -X history-bottom
# bind -n S-Home copy-mode 

# -- Plugins --

# Set TPM plugin location
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux-plugins'

# List of TPM plugins
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sensible'

# prefix + ctrl + {s,r} to save and restore tmux sessions
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @resurrect-capture-pane-contents 'on'
# run "mkdir -p ~/.cache/tmux/plugins/resurrect"
set -g @resurrect-dir '~/.cache/tmux/plugins/resurrect'

# Automatic save and restore with rmux-resurrect
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'
# set -g @continuum-boot 'on' # systemd unit doesn't have $PATH needed for clip; workaround? is the boot unit even desirable?
# set -g status-right 'Continuum status: #{continuum_status}'
set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'

# Clone TPM and install plugins if not present
if "test ! -d ~/.local/share/tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/tpm \
          && ~/.local/share/tmux/plugins/tpm/bin/install_plugins'"

# run '~/.local/share/tmux-plugins/tpm/bin/update_plugins all &'

# Initialize TMUX plugin manager (keep at the bottom of tmux.conf)
run '~/.local/share/tmux/plugins/tpm/tpm'
